//******************************************************************************
//  Project:		Weather-based simulation framework (WBSF)
//	Programmer:     Rémi Saint-Amant
// 
//  It under the terms of the GNU General Public License as published by
//     the Free Software Foundation
//  It is provided "as is" without express or implied warranty.
//	
//******************************************************************************
// 08-02-2018   Rémi Saint-Amant	Revision of shore distance and activation of precipitation gradients
// 01-01-2016	Rémi Saint-Amant	Include into Weather-based simulation framework
//******************************************************************************
#include "stdafx.h"   
#include <math.h>
#include <algorithm>

#include "Basic/Statistic.h"
#include "Basic/WeatherCorrection.h"
#include "Basic/NormalsStation.h"
#include "Basic/Shore.h"
#include "Newmat/Regression.h"
#include "Simulation/WeatherGradient.h"

using namespace std;
using namespace NEWMAT;
using namespace WBSF::NORMALS_DATA;
using namespace WBSF::HOURLY_DATA;
using namespace WBSF::WEATHER;
using namespace WBSF::GRADIENT;


namespace WBSF
{


	const char* GetHemisphereName(size_t i)
	{
		ASSERT(i < NB_HEMISPHERE);
		//static const char* HEMISPHERE_NAME[NB_HEMISPHERE] = { "Southern", "Northern" };
		static const char* HEMISPHERE_NAME[NB_HEMISPHERE] = { "Southern(West)", "Northern(West)", "Southern(Est)", "Northern(Est)" };

		return HEMISPHERE_NAME[i];
	}

	const char* GetGradientName(size_t i)
	{
		ASSERT(i < NB_GRADIENT);

		static const char* GRADIENT_NAME[NB_GRADIENT] = { "Tmin", "Tmax", "Prcp", "Tdew" };
		return GRADIENT_NAME[i];
	}

	const char* GetScaleName(size_t i)
	{
		ASSERT(i < NB_SCALE_GRADIENT);
		static const char* SCALE_NAME[NB_SCALE_GRADIENT] = { "Local", "Regional", "Continental" };

		return SCALE_NAME[i];
	}

	const char* GetSpaceName(size_t i)
	{
		ASSERT(i < NB_SPACE_EX);
		static const char* SPACE_NAME[NB_SPACE_EX] = { "Lon", "Lat", "Elv", "Dsh" };

		return SPACE_NAME[i];
	}


	size_t CWeatherGradient::GetNbSpaces()const { return m_bUseShore ? NB_SPACE_EX : NB_SPACE; }


	const double CWeatherGradient::FACTOR_Z = 1000;
	const int CWeatherGradient::NB_STATION_REGRESSION_LOCAL = 25;
	const double CWeatherGradient::REGIONAL_FACTOR = 3;
	const double CWeatherGradient::PPT_FACTOR = 1;

	//mean precipitation [mm]
	const CGradientSᵒ CWeatherGradient::GLOBAL_Sᵒ[NB_HEMISPHERE][GRADIENT::NB_GRADIENT] =
	{
		{//Southern(West)
			{ +017.529, +017.171, +016.202, +014.419, +012.546, +010.913, +010.121, +010.883, +012.203, +014.073, +015.534, +016.907 },
			{ +026.347, +025.861, +024.824, +022.951, +020.952, +019.481, +019.260, +020.574, +021.778, +023.322, +024.579, +025.795 },
			{ +186.056, +168.297, +172.220, +141.576, +116.930, +090.863, +078.461, +071.759, +085.330, +116.178, +138.092, +169.567 },
			{ +016.192, +016.302, +015.749, +014.247, +012.651, +010.955, +009.966, +010.158, +011.051, +012.843, +014.061, +015.384 },
		},
		{//Northern(West)
			{ -007.556, -006.289, -002.624, +002.078, +007.138, +011.669, +014.345, +013.613, +009.760, +004.165, -001.498, -006.191 },
			{ +003.090, +005.127, +009.620, +015.038, +020.248, +024.838, +027.650, +026.918, +022.840, +016.340, +009.263, +003.978 },
			{ +065.305, +057.246, +066.815, +065.001, +075.479, +078.690, +075.500, +073.300, +073.168, +072.407, +072.162, +070.015 },
			{ -007.724, -006.822, -003.519, +000.964, +006.349, +011.278, +013.996, +013.573, +010.038, +004.488, -001.202, -005.767 },
		},
		{//Southern(Est)
			{ +018.727, +018.550, +017.380, +015.388, +013.254, +011.336, +010.533, +011.080, +012.766, +014.689, +016.590, +017.946 },
			{ +028.748, +028.394, +027.197, +025.180, +022.818, +020.659, +020.115, +021.229, +023.268, +025.251, +026.910, +028.048 },
			{ +120.200, +108.029, +099.266, +078.847, +078.218, +080.085, +080.359, +075.049, +072.201, +082.138, +093.788, +111.890 },
			{ +015.524, +015.825, +015.062, +013.519, +011.891, +010.561, +009.585, +009.387, +010.414, +011.616, +013.285, +014.438 },
		},
		{//Northern(Est)
			{ -005.667, -004.770, -001.002, +004.032, +008.929, +013.077, +015.567, +014.922, +011.147, +006.277, +000.580, -003.807 },
			{ +001.535, +003.191, +007.817, +013.506, +018.779, +022.672, +024.970, +024.222, +019.954, +014.201, +007.652, +003.124 },
			{ +047.534, +039.913, +043.603, +045.956, +058.722, +073.970, +080.645, +078.190, +069.012, +063.725, +056.687, +052.739 },
			{ -005.213, -004.538, -001.493, +002.471, +007.007, +011.186, +013.787, +013.491, +010.172, +005.654, +000.578, -003.485 },
		},
	};


	//{
	//	{//Southern
	//		{ { +16.542, +16.354, +15.253, 13.448, 11.441, +9.698, +9.036, +9.703, 11.273, 13.084, +14.695, +15.897 } },
	//		//{ { +23.628, +23.326, +22.190, 20.209, 17.937, 16.020, 15.460, 16.492, 18.291, 20.197, 21.7605, +22.939 } },
	//		{ { +30.713, +30.298, +29.127, 26.971, 24.433, 22.343, 21.885, 23.281, 25.308, 27.310, +28.826, +29.981 } },
	//		{ { 151.782, 140.296, 134.342, 98.112, 72.718, 54.398, 47.419, 43.453, 52.628, 75.942, 100.170, 132.733 } },
	//		{ { +16.002, +16.295, +15.324, 13.567, 11.586, +9.838, +8.771, +8.843, 10.040, 11.683, +13.407, +14.906 } },
	//	},
	//	{//Northern
	//		{ { -6.038, -4.805, -0.978, +4.044, +8.912, 12.928, 15.215, 14.522, 10.942, +5.971, +0.127, -4.434 } },
	//		//{ { -1.206, +0.387, +4.543, +9.842, 14.853, 18.886, 21.159, 20.416, 16.606, 11.200, +4.904, +0.213 } },
	//		{ { +3.627, +5.579, 10.064, 15.640, 20.794, 24.843, 27.103, 26.310, 22.269, 16.429, +9.681, +4.861 } },
	//		{ { 51.805, 45.060, 51.343, 54.667, 69.800, 82.311, 87.544, 84.614, 77.041, 69.883, 63.566, 57.252 } },
	//		{ { -4.768, -4.020, -0.823, +3.223, +7.819, 11.967, 14.473, 14.160, 10.863, +6.239, +0.975, -3.173 } },
	//	}
	//};

	//const size_t CWeatherGradient::NB_S_MAX[NB_HEMISPHERE] = { 1000, 5000 };
	//const CGeoRect CWeatherGradient::DEFAULT_RECT[NB_HEMISPHERE] = { CGeoRect(-180, -90, 180, 0, PRJ_WGS_84), CGeoRect(-180, 0, 180, 90, PRJ_WGS_84) };
	const size_t CWeatherGradient::NB_S_MAX[NB_HEMISPHERE] = { 500, 5000, 500, 5000 };
	const CGeoRect CWeatherGradient::DEFAULT_RECT[NB_HEMISPHERE] = { CGeoRect(-180, -90, -25, 13, PRJ_WGS_84), CGeoRect(-180, 13, -25, 90, PRJ_WGS_84), CGeoRect(-25, -90, 180, 13, PRJ_WGS_84), CGeoRect(-25, 13, 180, 90, PRJ_WGS_84) };


	//const double CWeatherGradient::A[NB_SCALE_GRADIENT] = { 1, 4, 99 };//no longer used
	//const double CWeatherGradient::B[NB_SCALE_GRADIENT] = { 2, 8, 99 };//no longer used
	const double CWeatherGradient::F1[NB_SCALE_GRADIENT][GRADIENT::NB_GRADIENT] =
	{//  Tmin Tmax prcp Tdew
		{ 050, 050, 010, 050 },	//local [km]
		{ 150, 150, 035, 150 },	//Regional [km]
		{ 999, 999, 999, 999 },	//continental [km]
	};

	const double CWeatherGradient::F2[NB_SCALE_GRADIENT][GRADIENT::NB_GRADIENT] =
	{//   Tmin Tmax prcp Tdew
		{ 100, 100, 025, 100 },	//local [km]
		{ 300, 300, 075, 300 },	//RBegional [km]
		{ 999, 999, 999, 999 },	//continental [km]
	};




	//const double CWeatherGradient::A[NB_SCALE_GRADIENT] = { 2, 4, 8 };
	//const double CWeatherGradient::B[NB_SCALE_GRADIENT] = { 4, 8, 16 };
	//const double CWeatherGradient::F1[NB_SCALE_GRADIENT][GRADIENT::NB_GRADIENT] =
	//{//  Tmin Tmax prcp Tdew
	//	{ 050, 050, 010, 050 },	//local [km]
	//	{ 150, 150, 035, 150 },	//Regional [km]
	//	{ 999, 999, 999, 999 },	//continental [km]
	//};

	//const double CWeatherGradient::F2[NB_SCALE_GRADIENT][GRADIENT::NB_GRADIENT] =
	//{//   Tmin Tmax prcp Tdew
	//	{ 100, 100, 025, 100 },	//local [km]
	//	{ 300, 300, 075, 300 },	//Regional [km]
	//	{ 999, 999, 999, 999 },	//continental [km]
	//};



	//compute from 5000 stations in North America and Eurasie
	const double CWeatherGradient::DEFAULT_GRADIENTS[NB_HEMISPHERE][NB_GRADIENT][12][NB_SPACE_EX] =
	{
		{//Southern(West)
			{//Tmin
				{ -00.1733, +02.7550, -04.6961, +05.9410 },
				{ -00.1555, +03.1010, -04.7867, +05.7262 },
				{ -00.1728, +03.6376, -04.8128, +05.9012 },
				{ -00.2561, +04.2439, -04.9919, +05.4043 },
				{ -00.3456, +04.5765, -05.3526, +03.9003 },
				{ -00.4353, +04.8559, -05.5127, +03.3042 },
				{ -00.4011, +05.0055, -05.4267, +02.8602 },
				{ -00.2851, +04.9167, -05.2499, +04.1825 },
				{ -00.2477, +04.6114, -04.9199, +05.5893 },
				{ -00.1778, +04.1020, -04.7561, +06.9344 },
				{ -00.1943, +03.4784, -04.6286, +06.4865 },
				{ -00.1995, +02.9489, -04.5963, +06.3595 },
			},
			{//Tmax
				{ +00.1450, +02.7413, -03.7883, +08.0741 },
				{ +00.1607, +03.0950, -03.7922, +07.4376 },
				{ +00.1235, +03.6370, -03.7434, +07.7129 },
				{ +00.0388, +04.2075, -03.3873, +07.6124 },
				{ -00.0519, +04.5152, -03.0119, +06.5322 },
				{ -00.1118, +04.7956, -02.8495, +06.9793 },
				{ -00.0622, +04.9128, -02.8784, +08.0687 },
				{ +00.0915, +04.8187, -02.9649, +10.2525 },
				{ +00.1065, +04.5096, -02.9633, +10.9219 },
				{ +00.1557, +03.9765, -03.0503, +11.0500 },
				{ +00.1412, +03.3631, -03.1500, +09.6947 },
				{ +00.1383, +02.8799, -03.4120, +08.7592 },
			},
			{//Prcp
				{ -00.0366, -06.5647, -27.7556, +120.0479 },
				{ -01.4857, -01.1276, -36.0294, +95.6459 },
				{ +01.0458, +07.0564, -53.8180, +84.1515 },
				{ -01.8089, +16.9133, -59.0930, +25.5491 },
				{ -03.5607, +28.3052, -37.5991, -34.0733 },
				{ -03.9373, +25.9920, -17.8325, -50.1037 },
				{ -04.7779, +24.0999, -09.6349, -58.2788 },
				{ -06.3446, +21.0164, -01.9456, -36.7380 },
				{ -05.0239, +11.7206, +04.7364, -04.1430 },
				{ -05.1736, +06.3318, +00.5759, +42.7333 },
				{ -03.9784, +01.9090, -07.4571, +89.4115 },
				{ -02.9852, -07.1625, -12.6045, +126.2646 },
			},
			{//Tdew
				{ -00.3356, +02.7857, -04.7590, +07.1688 },
				{ -00.3756, +02.8221, -04.7282, +06.9972 },
				{ -00.4287, +03.1157, -04.6760, +06.8971 },
				{ -00.4637, +03.6578, -04.9138, +06.0631 },
				{ -00.4722, +03.9881, -05.5402, +04.2370 },
				{ -00.4906, +04.3653, -05.8541, +03.0561 },
				{ -00.4814, +04.4654, -05.8402, +01.4901 },
				{ -00.4590, +04.3767, -05.7623, +01.2347 },
				{ -00.4380, +04.1740, -05.4300, +02.3500 },
				{ -00.3544, +03.7838, -05.2953, +05.2875 },
				{ -00.3373, +03.4255, -05.1453, +06.1852 },
				{ -00.3153, +03.0387, -04.9134, +07.0472 },
			},
		},
		{//Northern(West)
			{//Tmin
				{ -01.7820, -07.7464, -02.0471, -05.8176 },
				{ -01.9793, -07.9042, -02.5549, -04.5567 },
				{ -01.4525, -07.6139, -03.1764, -01.6807 },
				{ -00.9506, -06.2217, -04.2593, +00.1661 },
				{ -00.6825, -05.1132, -04.7059, +01.3568 },
				{ -00.3940, -04.3744, -04.8388, +02.4941 },
				{ -00.2023, -03.8626, -04.1176, +02.5014 },
				{ -00.1579, -04.0854, -04.0435, +01.7959 },
				{ -00.3214, -04.7505, -03.9011, -00.1850 },
				{ -00.4805, -05.3545, -03.5738, -01.8111 },
				{ -00.4385, -06.3483, -03.1545, -03.5957 },
				{ -01.0531, -07.1401, -02.7126, -05.7616 },
			},
			{//Tmax
				{ -01.7421, -09.2350, -01.6989, -03.6285 },
				{ -02.0149, -09.2154, -02.1880, -02.6161 },
				{ -01.7136, -08.8678, -02.7570, +00.2837 },
				{ -01.3437, -07.4789, -03.9913, +02.7472 },
				{ -01.0383, -06.0710, -04.0301, +03.5654 },
				{ -00.8417, -05.2063, -03.4645, +04.5439 },
				{ -00.7324, -04.4726, -02.6984, +04.8621 },
				{ -00.7547, -04.8110, -02.8989, +04.4693 },
				{ -00.8622, -05.8974, -03.1578, +03.2130 },
				{ -00.8578, -07.2133, -03.2702, +01.5646 },
				{ -00.6717, -08.3642, -02.9488, -00.9934 },
				{ -01.1631, -08.7742, -02.3274, -03.6913 },
			},
			{//Prcp
				{ -03.5241, +01.3904, +01.2284, -77.4295 },
				{ -01.4611, -02.5140, +00.4558, -58.7546 },
				{ +01.3831, -03.3437, -02.9750, -48.5125 },
				{ +07.4314, -02.6069, -07.8332, -10.5639 },
				{ +10.7171, -06.2983, -15.3729, +13.6940 },
				{ +12.2876, -08.8206, -22.7577, +11.5830 },
				{ +13.6429, -10.4469, -14.4088, -02.5727 },
				{ +11.6498, -11.1455, -13.4514, -11.8110 },
				{ +09.1516, -10.7102, -13.8005, -27.5537 },
				{ +04.3554, -02.3033, -12.2657, -43.6811 },
				{ -01.2964, +02.8113, -06.1789, -67.9737 },
				{ -02.3883, +01.7107, -01.6071, -73.7912 },
			},
			{//Tdew
				{ -01.5489, -07.5509, -03.0829, -05.1403 },
				{ -01.7693, -07.7244, -03.3280, -04.1630 },
				{ -01.3206, -07.5190, -04.4691, -01.1729 },
				{ -00.8381, -06.2175, -05.9819, +00.2526 },
				{ -00.3391, -05.0475, -06.9179, +01.5246 },
				{ +00.0294, -03.9837, -07.9633, +03.5666 },
				{ +00.2576, -03.4299, -06.9908, +03.5833 },
				{ +00.2652, -03.6204, -06.9400, +02.8662 },
				{ +00.0848, -04.3342, -06.8170, +00.8780 },
				{ -00.2265, -05.0574, -05.9452, -01.1593 },
				{ -00.3396, -06.1204, -05.0277, -02.7759 },
				{ -00.8487, -07.0583, -04.2462, -04.8114 },
			},
		},
		{//Southern(Est)
			{//Tmin
				{ +00.1793, +02.5291, -08.0056, +08.6345 },
				{ +00.1488, +02.8128, -09.0917, +08.8842 },
				{ +00.0714, +03.4228, -09.7817, +07.5304 },
				{ +00.0098, +04.0483, -09.5286, +03.7923 },
				{ -00.0186, +04.4095, -08.9461, -00.5140 },
				{ -00.0283, +04.6002, -08.4939, -03.4775 },
				{ -00.0425, +04.6901, -08.3778, -03.8781 },
				{ -00.0339, +04.6409, -08.2410, -01.8698 },
				{ +00.0267, +04.4421, -08.6832, +02.6189 },
				{ +00.0614, +04.0537, -08.6098, +05.9997 },
				{ +00.1138, +03.3844, -08.0288, +07.2495 },
				{ +00.1480, +02.7831, -07.6648, +07.6987 },
			},
			{//Tmax
				{ +00.2475, +02.2764, -08.3666, +19.3197 },
				{ +00.2018, +02.6208, -09.1849, +18.8244 },
				{ +00.1255, +03.2938, -10.0785, +17.6639 },
				{ +00.0541, +03.9523, -10.1962, +14.5071 },
				{ -00.0250, +04.3640, -09.4686, +10.3713 },
				{ -00.0637, +04.5540, -08.9526, +07.2440 },
				{ -00.0299, +04.6140, -08.9291, +07.5863 },
				{ +00.0405, +04.5154, -08.7865, +10.5817 },
				{ +00.1340, +04.2934, -08.9467, +15.2844 },
				{ +00.1864, +03.8383, -08.7869, +18.2715 },
				{ +00.2032, +03.1418, -08.4747, +19.0108 },
				{ +00.2277, +02.5302, -08.2368, +18.9571 },
			},
			{//Prcp
				{ +03.9704, +18.0518, +30.3679, -83.4548 },
				{ +03.7391, +12.5768, +22.5724, -77.3750 },
				{ +03.7246, +15.3521, +21.7105, -89.3541 },
				{ +03.1805, +17.5367, +16.7828, -93.6660 },
				{ +03.7423, +24.2006, +02.3300, -101.4832 },
				{ +03.3640, +28.7532, -05.1263, -116.3831 },
				{ +03.7909, +32.2890, -07.4818, -99.4997 },
				{ +02.8277, +30.8425, -07.5089, -89.2158 },
				{ +03.4954, +30.2206, +07.7833, -97.0034 },
				{ +04.1577, +31.1229, +28.8752, -112.0244 },
				{ +05.0867, +30.0854, +50.0226, -100.2934 },
				{ +05.1405, +26.7443, +47.8955, -93.5073 },
			},
			{//Tdew
				{ +00.3857, +02.7452, -01.4316, -08.2300 },
				{ +00.4547, +02.8104, -01.3146, -07.8960 },
				{ +00.4356, +03.2289, -01.3019, -08.7785 },
				{ +00.3402, +03.6959, -01.7711, -10.1024 },
				{ +00.2860, +03.9723, -03.0358, -09.8772 },
				{ +00.2848, +04.1134, -03.6336, -08.7359 },
				{ +00.2508, +04.2004, -03.5271, -10.1054 },
				{ +00.2153, +04.1738, -03.3146, -12.2980 },
				{ +00.2929, +04.1410, -02.9726, -12.5928 },
				{ +00.2572, +03.9383, -02.1206, -12.9758 },
				{ +00.3031, +03.4821, -01.8706, -11.2543 },
				{ +00.3054, +03.0218, -01.6330, -10.1711 },
			},
		},
		{//Northern(Est)
			{//Tmin
				{ -01.8299, -07.1215, -04.4720, -06.6445 },
				{ -01.6804, -07.2480, -04.2592, -05.5576 },
				{ -01.3683, -06.8432, -04.4775, -02.6224 },
				{ -00.8527, -05.9841, -04.8983, +00.6465 },
				{ -00.4675, -04.9756, -04.7501, +01.3003 },
				{ -00.1796, -04.0875, -04.5624, +01.7532 },
				{ +00.0106, -03.5924, -04.3412, +01.0466 },
				{ -00.0220, -03.9088, -04.2320, -00.2631 },
				{ -00.2505, -04.5183, -04.2611, -01.7072 },
				{ -00.7293, -05.4032, -04.5965, -02.5978 },
				{ -01.2997, -06.4392, -04.8329, -04.5593 },
				{ -01.6889, -06.8332, -04.6754, -06.0272 },
			},
			{//Tmax
				{ -01.6291, -07.6038, -03.3695, -05.0313 },
				{ -01.4657, -07.6320, -03.3965, -03.1724 },
				{ -01.2042, -07.1044, -03.8931, -00.0128 },
				{ -00.8218, -06.3263, -04.6882, +03.2691 },
				{ -00.5594, -05.2432, -04.8340, +04.6652 },
				{ -00.3334, -04.2364, -04.5059, +05.1439 },
				{ -00.2496, -03.7403, -04.2141, +04.2460 },
				{ -00.2852, -04.2123, -04.1018, +03.0892 },
				{ -00.4065, -05.0791, -04.0489, +01.5200 },
				{ -00.7358, -06.2915, -04.0152, -00.1970 },
				{ -01.1481, -07.2474, -03.7789, -02.9998 },
				{ -01.4912, -07.4173, -03.5152, -04.7490 },
			},
			{//Prcp
				{ -03.0683, -00.5060, +02.0427, -27.4082 },
				{ -01.5704, -02.9947, +02.6775, -25.2284 },
				{ -00.1867, -04.7549, +04.8693, -27.5146 },
				{ +01.6768, -07.0716, +04.3987, -25.1662 },
				{ +03.5343, -10.4006, +04.6773, -28.4981 },
				{ +07.0254, -10.7238, +02.3530, -36.3956 },
				{ +09.2284, -07.7969, +01.9061, -33.6856 },
				{ +09.0857, -07.5274, +00.6140, -41.4038 },
				{ +06.1429, -08.4813, -02.9398, -44.5318 },
				{ +01.4137, -03.6894, -02.1793, -40.7411 },
				{ -01.5056, -02.3720, -02.1301, -32.6581 },
				{ -03.2289, -00.6492, -00.7571, -28.4713 },
			},
			{//Tdew
				{ -01.8411, -06.3029, -05.6867, -05.7337 },
				{ -01.6401, -06.2541, -05.5789, -04.7783 },
				{ -01.2969, -05.8019, -05.8075, -02.4770 },
				{ -00.8096, -05.1355, -05.7457, -01.1529 },
				{ -00.4261, -04.2192, -05.3495, -01.2148 },
				{ +00.0134, -03.1372, -05.2333, -00.2018 },
				{ +00.3121, -02.4517, -04.9667, -00.5812 },
				{ +00.2692, -02.7104, -04.9215, -01.7378 },
				{ -00.0929, -03.5217, -05.0880, -03.0759 },
				{ -00.7136, -04.6617, -05.6621, -03.2578 },
				{ -01.2914, -05.6910, -05.9861, -04.2399 },
				{ -01.7065, -06.0434, -05.8689, -05.1977 },
			},
		},
	};

	const double CWeatherGradient::DEFAULT_GRADIENTS_NO_SHORE[NB_HEMISPHERE][NB_GRADIENT][12][NB_SPACE_EX] =
	{
		{//Southern(West)
			{//Tmin
				{ -00.0309, +02.8259, -04.1760, +00.0000 },
				{ -00.0182, +03.1693, -04.2854, +00.0000 },
				{ -00.0314, +03.7081, -04.2962, +00.0000 },
				{ -00.1266, +04.3085, -04.5188, +00.0000 },
				{ -00.2521, +04.6230, -05.0112, +00.0000 },
				{ -00.3561, +04.8954, -05.2234, +00.0000 },
				{ -00.3325, +05.0396, -05.1763, +00.0000 },
				{ -00.1848, +04.9666, -04.8838, +00.0000 },
				{ -00.1137, +04.6782, -04.4306, +00.0000 },
				{ -00.0116, +04.1848, -04.1491, +00.0000 },
				{ -00.0388, +03.5558, -04.0608, +00.0000 },
				{ -00.0471, +03.0248, -04.0396, +00.0000 },
			},
			{//Tmax
				{ +00.3386, +02.8377, -03.0815, +00.0000 },
				{ +00.3390, +03.1838, -03.1411, +00.0000 },
				{ +00.3084, +03.7291, -03.0682, +00.0000 },
				{ +00.2213, +04.2984, -02.7209, +00.0000 },
				{ +00.1047, +04.5932, -02.4401, +00.0000 },
				{ +00.0555, +04.8789, -02.2385, +00.0000 },
				{ +00.1312, +05.0091, -02.1721, +00.0000 },
				{ +00.3373, +04.9410, -02.0674, +00.0000 },
				{ +00.3683, +04.6400, -02.0072, +00.0000 },
				{ +00.4206, +04.1084, -02.0829, +00.0000 },
				{ +00.3736, +03.4789, -02.3013, +00.0000 },
				{ +00.3483, +02.9845, -02.6452, +00.0000 },
			},
			{//Prcp
				{ +05.0165, -02.5592, -43.7235, +00.0000 },
				{ +02.5403, +02.0638, -48.7515, +00.0000 },
				{ +04.5879, +09.8643, -65.0113, +00.0000 },
				{ -00.7335, +17.7658, -62.4913, +00.0000 },
				{ -04.9949, +27.1683, -33.0670, +00.0000 },
				{ -06.0462, +24.3202, -11.1681, +00.0000 },
				{ -07.2310, +22.1554, -01.8831, +00.0000 },
				{ -07.8910, +19.7906, +02.9410, +00.0000 },
				{ -05.1983, +11.5824, +05.2874, +00.0000 },
				{ -03.3749, +07.7577, -05.1082, +00.0000 },
				{ -00.2149, +04.8923, -19.3499, +00.0000 },
				{ +02.3296, -02.9495, -29.3993, +00.0000 },
			},
			{//Tdew
				{ -00.1831, +02.8597, -04.1334, +00.0000 },
				{ -00.2267, +02.8944, -04.1176, +00.0000 },
				{ -00.2819, +03.1870, -04.0742, +00.0000 },
				{ -00.3346, +03.7205, -04.3847, +00.0000 },
				{ -00.3820, +04.0319, -05.1705, +00.0000 },
				{ -00.4256, +04.3969, -05.5875, +00.0000 },
				{ -00.4497, +04.4808, -05.7101, +00.0000 },
				{ -00.4327, +04.3895, -05.6545, +00.0000 },
				{ -00.3880, +04.1983, -05.2250, +00.0000 },
				{ -00.2419, +03.8385, -04.8340, +00.0000 },
				{ -00.2056, +03.4894, -04.6056, +00.0000 },
				{ -00.1653, +03.1115, -04.2985, +00.0000 },
			},
		},
		{//Northern(West)
			{//Tmin
				{ -02.0767, -08.0117, -03.5243, +00.0000 },
				{ -02.2101, -08.1120, -03.7119, +00.0000 },
				{ -01.5377, -07.6905, -03.6032, +00.0000 },
				{ -00.9422, -06.2141, -04.2171, +00.0000 },
				{ -00.6138, -05.0513, -04.3613, +00.0000 },
				{ -00.2677, -04.2607, -04.2055, +00.0000 },
				{ -00.0756, -03.7485, -03.4825, +00.0000 },
				{ -00.0669, -04.0035, -03.5875, +00.0000 },
				{ -00.3308, -04.7590, -03.9481, +00.0000 },
				{ -00.5722, -05.4370, -04.0336, +00.0000 },
				{ -00.6207, -06.5123, -04.0675, +00.0000 },
				{ -01.3449, -07.4028, -04.1756, +00.0000 },
			},
			{//Tmax
				{ -01.9259, -09.4005, -02.6202, +00.0000 },
				{ -02.1474, -09.3347, -02.8522, +00.0000 },
				{ -01.6992, -08.8549, -02.6850, +00.0000 },
				{ -01.2045, -07.3536, -03.2938, +00.0000 },
				{ -00.8577, -05.9085, -03.1247, +00.0000 },
				{ -00.6116, -04.9991, -02.3107, +00.0000 },
				{ -00.4861, -04.2509, -01.4638, +00.0000 },
				{ -00.5283, -04.6072, -01.7641, +00.0000 },
				{ -00.6995, -05.7509, -02.3420, +00.0000 },
				{ -00.7785, -07.1420, -02.8729, +00.0000 },
				{ -00.7220, -08.4095, -03.2010, +00.0000 },
				{ -01.3501, -08.9425, -03.2648, +00.0000 },
			},
			{//Prcp
				{ -07.4442, -04.1648, -18.9239, +00.0000 },
				{ -04.4358, -06.7293, -14.8360, +00.0000 },
				{ -01.0730, -06.8242, -15.6012, +00.0000 },
				{ +06.8965, -03.3648, -10.5826, +00.0000 },
				{ +11.4104, -05.3159, -11.8088, +00.0000 },
				{ +12.8740, -07.9896, -19.7431, +00.0000 },
				{ +13.5126, -10.6315, -15.0784, +00.0000 },
				{ +11.0518, -11.9929, -16.5254, +00.0000 },
				{ +07.7566, -12.6870, -20.9718, +00.0000 },
				{ +02.1440, -05.4373, -23.6344, +00.0000 },
				{ -04.7377, -02.0655, -23.8701, +00.0000 },
				{ -06.1242, -03.5835, -20.8125, +00.0000 },
			},
			{//Tdew
				{ -01.6150, -07.5680, -05.3452, +00.0000 },
				{ -01.8228, -07.7383, -05.1602, +00.0000 },
				{ -01.3356, -07.5229, -04.9853, +00.0000 },
				{ -00.8349, -06.2166, -05.8707, +00.0000 },
				{ -00.3195, -05.0424, -06.2469, +00.0000 },
				{ +00.0752, -03.9718, -06.3935, +00.0000 },
				{ +00.3037, -03.4180, -05.4137, +00.0000 },
				{ +00.3020, -03.6108, -05.6786, +00.0000 },
				{ +00.0960, -04.3312, -06.4305, +00.0000 },
				{ -00.2414, -05.0613, -06.4554, +00.0000 },
				{ -00.3753, -06.1297, -06.2494, +00.0000 },
				{ -00.9105, -07.0744, -06.3637, +00.0000 },
			},
		},
		{//Southern(Est)
			{//Tmin
				{ +00.1596, +02.5959, -05.9211, +00.0000 },
				{ +00.1285, +02.8815, -06.9470, +00.0000 },
				{ +00.0543, +03.4811, -07.9638, +00.0000 },
				{ +00.0012, +04.0776, -08.6131, +00.0000 },
				{ -00.0175, +04.4055, -09.0701, +00.0000 },
				{ -00.0204, +04.5732, -09.3334, +00.0000 },
				{ -00.0337, +04.6601, -09.3140, +00.0000 },
				{ -00.0296, +04.6264, -08.6924, +00.0000 },
				{ +00.0207, +04.4624, -08.0510, +00.0000 },
				{ +00.0477, +04.1002, -07.1614, +00.0000 },
				{ +00.0973, +03.4405, -06.2787, +00.0000 },
				{ +00.1305, +02.8427, -05.8063, +00.0000 },
			},
			{//Tmax
				{ +00.2035, +02.4259, -03.7027, +00.0000 },
				{ +00.1590, +02.7665, -04.6406, +00.0000 },
				{ +00.0852, +03.4305, -05.8143, +00.0000 },
				{ +00.0210, +04.0646, -06.6941, +00.0000 },
				{ -00.0486, +04.4443, -06.9649, +00.0000 },
				{ -00.0802, +04.6101, -07.2039, +00.0000 },
				{ -00.0471, +04.6727, -07.0977, +00.0000 },
				{ +00.0164, +04.5973, -06.2320, +00.0000 },
				{ +00.0992, +04.4117, -05.2569, +00.0000 },
				{ +00.1448, +03.9798, -04.3760, +00.0000 },
				{ +00.1599, +03.2889, -03.8854, +00.0000 },
				{ +00.1845, +02.6769, -03.6605, +00.0000 },
			},
			{//Prcp
				{ +04.8002, +17.5686, +05.4778, +00.0000 },
				{ +04.5085, +12.1289, -00.5044, +00.0000 },
				{ +04.6131, +14.8348, -04.9391, +00.0000 },
				{ +04.1119, +16.9944, -11.1528, +00.0000 },
				{ +04.7515, +23.6131, -27.9369, +00.0000 },
				{ +04.5213, +28.0794, -39.8372, +00.0000 },
				{ +04.7804, +31.7129, -37.1572, +00.0000 },
				{ +03.7149, +30.3259, -34.1172, +00.0000 },
				{ +04.4600, +29.6590, -21.1476, +00.0000 },
				{ +05.2717, +30.4744, -04.5357, +00.0000 },
				{ +06.0840, +29.5047, +20.1104, +00.0000 },
				{ +06.0703, +26.2030, +20.0073, +00.0000 },
			},
			{//Tdew
				{ +00.4104, +02.7252, -03.4162, +00.0000 },
				{ +00.4784, +02.7912, -03.2187, +00.0000 },
				{ +00.4619, +03.2075, -03.4188, +00.0000 },
				{ +00.3705, +03.6713, -04.2072, +00.0000 },
				{ +00.3156, +03.9482, -05.4176, +00.0000 },
				{ +00.3109, +04.0922, -05.7401, +00.0000 },
				{ +00.2810, +04.1757, -05.9639, +00.0000 },
				{ +00.2522, +04.1438, -06.2801, +00.0000 },
				{ +00.3306, +04.1103, -06.0092, +00.0000 },
				{ +00.2960, +03.9067, -05.2496, +00.0000 },
				{ +00.3368, +03.4546, -04.5845, +00.0000 },
				{ +00.3358, +02.9970, -04.0856, +00.0000 },
			},
		},
		{//Northern(Est)
			{//Tmin
				{ -02.1415, -07.5138, -06.7129, +00.0000 },
				{ -01.9410, -07.5762, -06.1336, +00.0000 },
				{ -01.4913, -06.9980, -05.3619, +00.0000 },
				{ -00.8223, -05.9460, -04.6802, +00.0000 },
				{ -00.4065, -04.8988, -04.3115, +00.0000 },
				{ -00.0974, -03.9840, -03.9711, +00.0000 },
				{ +00.0597, -03.5306, -03.9882, +00.0000 },
				{ -00.0343, -03.9243, -04.3208, +00.0000 },
				{ -00.3306, -04.6191, -04.8369, +00.0000 },
				{ -00.8511, -05.5566, -05.4726, +00.0000 },
				{ -01.5135, -06.7084, -06.3707, +00.0000 },
				{ -01.9715, -07.1890, -06.7082, +00.0000 },
			},
			{//Tmax
				{ -01.8651, -07.9009, -05.0664, +00.0000 },
				{ -01.6145, -07.8193, -04.4664, +00.0000 },
				{ -01.2048, -07.1052, -03.8975, +00.0000 },
				{ -00.6685, -06.1333, -03.5857, +00.0000 },
				{ -00.3406, -04.9677, -03.2606, +00.0000 },
				{ -00.0922, -03.9327, -02.7711, +00.0000 },
				{ -00.0504, -03.4896, -02.7821, +00.0000 },
				{ -00.1403, -04.0299, -03.0599, +00.0000 },
				{ -00.3352, -04.9894, -03.5362, +00.0000 },
				{ -00.7451, -06.3032, -04.0816, +00.0000 },
				{ -01.2888, -07.4245, -04.7907, +00.0000 },
				{ -01.7140, -07.6977, -05.1169, +00.0000 },
			},
			{//Prcp
				{ -04.6510, -01.8461, -07.2354, +00.0000 },
				{ -03.0273, -04.2282, -05.8627, +00.0000 },
				{ -01.7757, -06.1002, -04.4447, +00.0000 },
				{ +00.2235, -08.3021, -04.1204, +00.0000 },
				{ +01.8886, -11.7940, -04.9697, +00.0000 },
				{ +04.9236, -12.5034, -09.9674, +00.0000 },
				{ +07.2831, -09.4440, -09.4970, +00.0000 },
				{ +06.6947, -09.5519, -13.4017, +00.0000 },
				{ +03.5712, -10.6588, -18.0144, +00.0000 },
				{ -00.9390, -05.6815, -15.9707, +00.0000 },
				{ -03.3916, -03.9689, -13.1853, +00.0000 },
				{ -04.8731, -02.0413, -10.3950, +00.0000 },
			},
			{//Tdew
				{ -02.1030, -06.7172, -07.5953, +00.0000 },
				{ -01.8584, -06.5994, -07.1694, +00.0000 },
				{ -01.4101, -05.9809, -06.6320, +00.0000 },
				{ -00.8623, -05.2188, -06.1295, +00.0000 },
				{ -00.4816, -04.3069, -05.7538, +00.0000 },
				{ +00.0042, -03.1517, -05.3005, +00.0000 },
				{ +00.2856, -02.4937, -05.1602, +00.0000 },
				{ +00.1899, -02.8360, -05.5000, +00.0000 },
				{ -00.2334, -03.7439, -06.1119, +00.0000 },
				{ -00.8625, -04.8971, -06.7465, +00.0000 },
				{ -01.4851, -05.9974, -07.3975, +00.0000 },
				{ -01.9440, -06.4190, -07.5991, +00.0000 },
			},
		},
	};
	//{
	//	{//Southern
	//		{//Tmin
	//			{ +0.1501, +2.7114, -4.0720, +0.3883 },
	//			{ +0.1547, +3.0803, -4.3039, -0.4297 },
	//			{ +0.1124, +3.7362, -4.4555, -1.5355 },
	//			{ +0.0730, +4.4044, -4.5744, -2.8112 },
	//			{ +0.0291, +4.7551, -4.7695, -4.1302 },
	//			{ -0.0159, +4.9327, -4.8813, -4.7029 },
	//			{ -0.0338, +5.0313, -4.8209, -4.6392 },
	//			{ -0.0258, +5.0042, -4.5652, -3.4607 },
	//			{ +0.0301, +4.8251, -4.3252, -1.9395 },
	//			{ +0.0667, +4.3891, -4.1228, -0.5486 },
	//			{ +0.1088, +3.6354, -4.0136, +0.0820 },
	//			{ +0.1297, +2.9928, -3.9880, +0.4030 },
	//		},
	//		//{//Tair
	//		//	{ +0.0000, +0.0000, +0.0000, +0.0000 },
	//		//	{ +0.0000, +0.0000, +0.0000, +0.0000 },
	//		//	{ +0.0000, +0.0000, +0.0000, +0.0000 },
	//		//	{ +0.0000, +0.0000, +0.0000, +0.0000 },
	//		//	{ +0.0000, +0.0000, +0.0000, +0.0000 },
	//		//	{ +0.0000, +0.0000, +0.0000, +0.0000 },
	//		//	{ +0.0000, +0.0000, +0.0000, +0.0000 },
	//		//	{ +0.0000, +0.0000, +0.0000, +0.0000 },
	//		//	{ +0.0000, +0.0000, +0.0000, +0.0000 },
	//		//	{ +0.0000, +0.0000, +0.0000, +0.0000 },
	//		//	{ +0.0000, +0.0000, +0.0000, +0.0000 },
	//		//	{ +0.0000, +0.0000, +0.0000, +0.0000 },
	//		//},
	//		{//Tmax
	//			{ +0.0369, +3.8202, -4.1570, +7.1764 },
	//			{ +0.0239, +4.1710, -4.3229, +5.9834 },
	//			{ -0.0029, +4.9182, -4.6038, +5.1487 },
	//			{ -0.0240, +5.6934, -4.6914, +4.2211 },
	//			{ -0.0502, +6.2248, -4.7292, +2.7883 },
	//			{ -0.0874, +6.4998, -4.9496, +2.2888 },
	//			{ -0.0905, +6.5777, -4.9812, +2.8999 },
	//			{ -0.0822, +6.4960, -4.6994, +5.0791 },
	//			{ -0.0200, +6.2426, -4.1919, +6.9073 },
	//			{ -0.0025, +5.6663, -3.9840, +7.8419 },
	//			{ +0.0211, +4.8498, -3.8341, +7.6312 },
	//			{ +0.0244, +4.1330, -3.9240, +7.4345 },
	//		},
	//		{//Prcp
	//			{ -2.2818, +35.6700, -28.2155, +20.3259 },
	//			{ -1.4871, +37.9047, -33.8860, -01.9099 },
	//			{ -2.7280, +38.9591, -45.7537, -00.6736 },
	//			{ -2.6016, +26.3877, -49.9415, -14.4330 },
	//			{ -1.5897, +13.3773, -41.6551, -34.6773 },
	//			{ -0.8179, +02.0876, -31.3235, -39.5551 },
	//			{ -0.6283, -00.6093, -25.5538, -44.2555 },
	//			{ -0.6912, -02.9476, -21.6993, -28.5165 },
	//			{ -1.4918, -02.9255, -20.5438, -06.2750 },
	//			{ -2.2072, +01.4635, -18.8986, +20.9203 },
	//			{ -2.3195, +11.6999, -17.6462, +38.8327 },
	//			{ -2.4502, +23.5352, -18.9925, +40.3900 },
	//		},
	//		{//Tdew
	//			{ -0.0728, +3.7361, -5.0168, -0.6015 },
	//			{ -0.0489, +3.8196, -5.2206, -0.6059 },
	//			{ -0.1013, +4.2219, -5.3556, -1.6714 },
	//			{ -0.1061, +4.6777, -5.6728, -2.6143 },
	//			{ -0.0904, +4.8272, -6.3580, -3.3272 },
	//			{ -0.0825, +4.9102, -6.7385, -3.4658 },
	//			{ -0.0919, +4.9284, -6.6081, -4.6105 },
	//			{ -0.1184, +4.8723, -6.4635, -5.0428 },
	//			{ -0.0928, +4.8030, -6.2588, -4.5013 },
	//			{ -0.1186, +4.6173, -5.8566, -2.8315 },
	//			{ -0.0928, +4.2880, -5.4139, -1.6828 },
	//			{ -0.0881, +3.9675, -5.1199, -0.8193 },
	//		},
	//	},
	//	{//Northern
	//		{//Tmin
	//			{ -0.1648, -6.8418, -2.6711, -7.8028 },
	//			{ -0.1497, -6.9379, -2.7535, -6.3639 },
	//			{ -0.0640, -6.4590, -3.2703, -3.2062 },
	//			{ +0.0332, -5.4912, -4.0628, -0.0867 },
	//			{ +0.0673, -4.3178, -4.2066, +1.0177 },
	//			{ +0.0705, -3.3286, -4.2215, +1.7720 },
	//			{ +0.0695, -2.7634, -3.8330, +1.6409 },
	//			{ +0.0584, -2.9807, -3.6997, +0.5991 },
	//			{ +0.0391, -3.6934, -3.6599, -1.1626 },
	//			{ +0.0151, -4.6773, -3.7395, -2.7160 },
	//			{ -0.0923, -5.9076, -3.6701, -5.0017 },
	//			{ -0.1329, -6.5246, -3.1865, -7.3437 },
	//		},
	//		//{//Tair
	//		//	{ +0.0000, +0.0000, +0.0000, +0.0000 },
	//		//	{ +0.0000, +0.0000, +0.0000, +0.0000 },
	//		//	{ +0.0000, +0.0000, +0.0000, +0.0000 },
	//		//	{ +0.0000, +0.0000, +0.0000, +0.0000 },
	//		//	{ +0.0000, +0.0000, +0.0000, +0.0000 },
	//		//	{ +0.0000, +0.0000, +0.0000, +0.0000 },
	//		//	{ +0.0000, +0.0000, +0.0000, +0.0000 },
	//		//	{ +0.0000, +0.0000, +0.0000, +0.0000 },
	//		//	{ +0.0000, +0.0000, +0.0000, +0.0000 },
	//		//	{ +0.0000, +0.0000, +0.0000, +0.0000 },
	//		//	{ +0.0000, +0.0000, +0.0000, +0.0000 },
	//		//	{ +0.0000, +0.0000, +0.0000, +0.0000 },
	//		//},

	//		{//Tmax
	//			{ -0.2587, -7.8254, -2.3254, -5.4359 },
	//			{ -0.2462, -7.8073, -2.5248, -3.6357 },
	//			{ -0.1757, -7.2857, -3.0735, -0.5145 },
	//			{ -0.0986, -6.3587, -3.9661, +2.7416 },
	//			{ -0.0528, -5.1471, -4.0395, +4.2110 },
	//			{ -0.0474, -4.0136, -3.7432, +4.8364 },
	//			{ -0.0751, -3.3087, -3.1690, +4.3988 },
	//			{ -0.0955, -3.6420, -3.1076, +3.5036 },
	//			{ -0.1255, -4.6555, -3.1623, +1.9634 },
	//			{ -0.1374, -5.9528, -3.3060, +0.0883 },
	//			{ -0.1901, -7.1949, -3.2259, -2.7585 },
	//			{ -0.2150, -7.6082, -2.7562, -5.1985 },
	//		},
	//		{//prcp
	//			{ -1.7343, -03.3299, -02.5330, -38.2934 },
	//			{ -1.3050, -04.6002, -01.4376, -30.5371 },
	//			{ -1.1678, -06.8949, -02.4600, -26.2476 },
	//			{ -0.4802, -11.0763, -05.6527, -13.8631 },
	//			{ +0.0674, -18.0363, -12.1214, -05.3803 },
	//			{ +1.1816, -21.2772, -14.6317, -05.9443 },
	//			{ +2.3223, -20.8544, -11.3473, -06.7425 },
	//			{ +2.2537, -19.9290, -09.9923, -16.0656 },
	//			{ +0.8535, -17.9371, -12.7215, -27.2522 },
	//			{ -0.3647, -12.7339, -13.0829, -35.6856 },
	//			{ -1.3347, -08.2779, -08.7235, -40.1016 },
	//			{ -1.6499, -05.3256, -05.1333, -39.9362 },
	//		},
	//		{ //Tdew
	//			{ -0.2935, -5.5482, -3.9213, -8.5562 },
	//			{ -0.2611, -5.6090, -3.9234, -7.3837 },
	//			{ -0.1709, -5.2239, -4.4954, -4.6747 },
	//			{ -0.0600, -4.7142, -5.0108, -2.5893 },
	//			{ -0.0179, -3.9528, -5.0726, -1.3537 },
	//			{ +0.0420, -3.1503, -5.2801, +0.3314 },
	//			{ +0.0997, -2.6322, -5.1298, +0.8237 },
	//			{ +0.0849, -2.8216, -5.0116, -0.1684 },
	//			{ +0.0107, -3.4924, -4.8803, -2.2014 },
	//			{ -0.0714, -4.2382, -4.9142, -3.9638 },
	//			{ -0.2024, -5.0496, -4.7949, -6.0284 },
	//			{ -0.2638, -5.4108, -4.2827, -7.9538 },
	//		},
	//	},
	//};

	CWeatherGradient::CWeatherGradient()
	{
		reset();
	}


	void CWeatherGradient::reset()
	{
		ASSERT(NB_GRADIENT == 4);
		ASSERT(NB_SPACE_EX == 4);

		CWeatherCorrections::reset();
		reset_data();
		m_bForceComputeAllScale = false;
		m_bKeepInputs = false;
	}

	void CWeatherGradient::reset_data()
	{
		for (size_t z = 0; z < NB_SCALE_GRADIENT; z++)
		{
			for (size_t g = 0; g < NB_GRADIENT; g++)
			{
				m_R²[z][g].fill(0);
				for (size_t m = 0; m < 12; m++)
					m_Sᵒ[z][g][m].clear();

				for (size_t m = 0; m < 12; m++)
					m_gradient[z][g][m].fill(0);

				//for (size_t t = 0; t < NB_CORRECTION_TYPES; t++)
				//{
					//m_factor[t][z][g].fill(0);
				//}
			}
		}
	}


	double CWeatherGradient::GetDistance(size_t s, const CLocation& target, const CLocation& station)
	{
		double d = 0;
		switch (s)
		{
		case X_GR: d = station.GetDistanceXY(target).m_x / 1000; break;//[km]
		case Y_GR: d = station.GetDistanceXY(target).m_y / 1000; break;//[km]
		case Z_GR: d = target.m_z - station.m_z; break; //[m]
		case S_GR: d = (target.GetShoreDistance() - station.GetShoreDistance()) / 1000; break;//[km]
		default: ASSERT(false);
		}

		return d;
	}

	double CWeatherGradient::GetFactor(size_t z, size_t g, size_t s, const CSearchResultVector& results)const
	{
		if (z == CONTINENTAL_GRADIENT)
			return 1;

		if (s == S_GR && !m_bUseShore)
			return 1;

		CLocation Lᵒ;
		results.GetCentroid(Lᵒ);


		//CStatisticEx Mᵒ;
		//for (size_t i = 0; i < results.size(); i++)
		//{
		//	const CLocation& st = m_pNormalDB->at(results[i].m_index);
		//	Mᵒ += GetDistance(s, st, Lᵒ);
		//}

		//double mean = GetDistance(s, m_target, Lᵒ);
		//double mad = Mᵒ[MAD];

		////if mad == 0 take half regional and local gradient 
		//double ff = mad > 0 ? (mean - A[z] * mad) / (B[z] * mad) : 0.5;
		//double f = 1 - min(1.0, max(0.0, ff));

		//double f = 1;
		//double correction = 1;


		double f1 = F1[z][g];
		double f2 = F2[z][g];

		double Dc = m_target.GetDistance(Lᵒ, true, m_bUseShore) / 1000;// take elevation in distance of centroid km
		double f = 1 - min(1.0, max(0.0, Dc - f1) / f2);


		//f *= correction;

		//for optimisation if the factor is over 95% we take 100 and below 5% we take 0
		if (f > 0.95)
			f = 1;

		if (f < 0.05)
			f = 0;

		return f;
	}


	ERMsg CWeatherGradient::CreateDefaultGradient(std::string filePath, CCallback& callback)
	{
		ASSERT(m_pNormalDB.get() && m_pNormalDB->IsOpen());

		ERMsg msg;

		string filePath1 = GetPath(filePath) + GetFileTitle(filePath) + "_info.csv";
		string filePath2 = GetPath(filePath) + GetFileTitle(filePath) + "_S°.txt";
		string filePath3 = GetPath(filePath) + GetFileTitle(filePath) + "_gradient.txt";

		reset_data();

		callback.PushTask("Create Default Gradient", NB_HEMISPHERE*m_variables.count());

		std::array < CGradientVariables, NB_HEMISPHERE> gradient;
		std::array < std::array < CGradientR², GRADIENT::NB_GRADIENT >, NB_HEMISPHERE> R²;
		std::array <std::array <CGradientSᵒ, GRADIENT::NB_GRADIENT >, NB_HEMISPHERE> Sᵒ;
		CGradientInputs inputs;

		for (size_t e = 0; e < NB_HEMISPHERE&&msg; e++)
		{
			((CGeoPoint&)m_target) = DEFAULT_RECT[e].GetCentroid();
			m_target.m_z = 0;
			m_target.SetShoreDistance(0);

			for (TVarH v = H_FIRST_VAR; v < NB_VAR_H&&msg; v++)
			{
				if (m_variables[v])
				{
					callback.AddMessage("**************************************************************************************");
					callback.AddMessage(GetVariableTitle(v));

					CSearchResultVector results;

					ERMsg msgTmp = m_pNormalDB->GetStationList(results, v, YEAR_NOT_INIT, true, DEFAULT_RECT[e]);



					if (msgTmp)
						msgTmp = m_pNormalDB->GenerateLOC(results, CWeatherDatabase::WELL_DISTRIBUTED_STATIONS, min(results.size(), NB_S_MAX[e]), v, YEAR_NOT_INIT, true, true, DEFAULT_RECT[e], callback);

					if (msgTmp && !results.empty())
					{
						size_t g = V2G(v);


						msg = ComputeGradient(g, results, gradient[e][g], R²[e][g], inputs[e][g], callback);


						GetSᵒ(g, results, Sᵒ[e][g]);

						CLocationVector locations = m_pNormalDB->GetLocations(results);
						msg += locations.Save(GetPath(filePath) + GetFileTitle(filePath) + "_" + GetHemisphereName(e) + "_" + GetGradientName(g) + ".csv");

					}
				}
			}
		}


		ofStream file1;
		msg = file1.open(filePath1);

		if (msg)
		{
			file1.write("continent,gradient,month,R²,S°,X,Y,Z,S\n");

			for (size_t z = 0; z < NB_HEMISPHERE; z++)
			{
				for (size_t g = 0; g < NB_GRADIENT; g++)
				{
					for (size_t m = 0; m < 12; m++)
					{
						double sᵒ = 0;
						if (Sᵒ[z][g][m].IsInit())
							sᵒ = Sᵒ[z][g][m][MEAN];

						string line = FormatA("%d,%d,%02d,%08.3lf,%+08.3lf", z + 1, g + 1, m + 1, R²[z][g][m], sᵒ);
						for (size_t s = 0; s < NB_SPACE_EX; s++)
							line += "," + FormatA("%+08.4lf", gradient[z][g][m][s]);

						file1.write(line + "\n");
					}
				}
			}

			file1.close();
		}

		ofStream file2;
		msg = file2.open(filePath2);

		if (msg)
		{

			string text = "{\n";
			for (size_t z = 0; z < NB_HEMISPHERE; z++)
			{
				text += FormatA("\t{//%s\n", GetHemisphereName(z));
				for (size_t g = 0; g < NB_GRADIENT; g++)
				{
					text += "\t\t{";
					for (size_t m = 0; m < 12; m++)
					{
						double sᵒ = 0;
						if (Sᵒ[z][g][m].IsInit())
							sᵒ = Sᵒ[z][g][m][MEAN];

						if (m > 0)
							text += ",";
						text += FormatA("%+08.3lf", sᵒ);
					}
					text += "},\n";
				}
				text += "\t},\n";
			}
			text += "};\n";

			file2.write(text);
			file2.close();
		}

		ofStream file3;
		msg = file3.open(filePath3);

		if (msg)
		{

			string text = "{\n";
			for (size_t z = 0; z < NB_HEMISPHERE; z++)
			{
				text += FormatA("\t{//%s\n", GetHemisphereName(z));
				for (size_t g = 0; g < NB_GRADIENT; g++)
				{
					text += FormatA("\t\t{//%s\n", GetGradientName(g));
					for (size_t m = 0; m < 12; m++)
					{
						text += "\t\t\t{";

						for (size_t s = 0; s < NB_SPACE_EX; s++)
						{
							if (s > 0)
								text += ",";
							text += FormatA("%+08.4lf", gradient[z][g][m][s]);
						}


						text += "},\n";
					}
					text += "\t\t},\n";
				}
				text += "\t},\n";
			}
			text += "};\n";

			file3.write(text);
			file3.close();
		}


		callback.PopTask();

		return msg;
	}

	std::set<int> CWeatherGradient::GetYears()const
	{

		std::set<int> years({ -999 });

		if (m_pObservedDB.get())
		{
			ASSERT(m_firstYear <= m_lastYear);
			ASSERT(m_firstYear > -999 && m_lastYear > -999);
			for (size_t y = m_firstYear; y <= m_lastYear; y++)
				years.insert(years.end(), int(y));
		}


		return years;
	}


	ERMsg CWeatherGradient::CreateGradient(CCallback& callback)
	{
		ERMsg msg;

		reset_data();


		//commflic in multiThread
		size_t nbVar = 0;
		for (TVarH v = H_FIRST_VAR; v < NB_VAR_H&&msg; v++)
		{
			size_t g = V2G(v);
			if (m_variables[v] && g < NB_GRADIENT)
				nbVar++;
		}
		callback.PushTask("Create gradient", NB_SCALE_GRADIENT*nbVar, 1);


		size_t e = NORTH_WEST;
		if (m_target.m_lat < 13 && m_target.m_lon < -25)
			e = SOUTH_WEST;
		else if (m_target.m_lat < 13 && m_target.m_lon >= -25)
			e = SOUTH_EST;
		else
			e = NORTH_EST;

		size_t nbSpaces = GetNbSpaces();
		std::set<int> years = GetYears();

		for (TVarH v = H_FIRST_VAR; v < NB_VAR_H&&msg; v++)
		{
			size_t g = V2G(v);
			if (m_variables[v] && g < NB_GRADIENT)
			{
				bool bContinue = true;
				for (size_t z = 0; z < NB_SCALE_GRADIENT&&msg&&bContinue; z++)
				{
					//vector<double> sum (GetNbCorrectionType(), 0 );

					//map<int, double> sum;

					//m_factor[z][g].resize(GetNbCorrectionType(), 0);
					//for (size_t y = 0; y < years.size(); y++)
					/*for (set<int>::const_iterator it = years.begin(); it != years.end(); it++)
					{
						m_factor[*it][z][g].fill(0);

						for (size_t zz = 0; zz < z; zz++)
							for (size_t s = 0; s < nbSpaces; s++)
								sum[*it] += m_factor[*it][zz][g][s] / nbSpaces;
					}*/

					//if (sum[0] < 1 || (sum.size() == 2 && sum[1] < 1) || m_bForceComputeAllScale)
					//{
					
					if (z < CONTINENTAL_GRADIENT)
					{

						bContinue = m_bForceComputeAllScale;
						size_t nbStations = size_t(NB_STATION_REGRESSION_LOCAL*pow(REGIONAL_FACTOR, z));

						ERMsg msgTmp;
						for (set<int>::const_iterator it = years.begin(); it != years.end(); it++)
						{
							CSearchResultVector results;

							//for a unknown reason, using elevation and shore in selection of gradient stations get better result in all situation
							if (*it == -999)
							{
								msgTmp += m_pNormalDB->Search(results, m_target, nbStations, -1, v, -999, true, m_bUseNearestElev, m_bUseNearestShore);
								if (msgTmp)
									msg = ComputeGradient(g, results, m_gradient[z][g], m_R²[z][g], m_inputs[z][g], callback);
								else  if (!m_allowDerivedVariables[v])
									msg += msgTmp;

								GetSᵒ(g, results, m_Sᵒ[z][g]);
							}
							else
							{
								msgTmp += m_pObservedDB->Search(results, m_target, nbStations, -1, v, *it, true, m_bUseNearestElev, m_bUseNearestShore);
							}

							//compute factor
					//for (size_t t = 0; t < GetNbCorrectionType(); t++)

							//for (set<int>::const_iterator it = years.begin(); it != years.end(); it++)
							//{

							for (size_t s = 0; s < GetNbSpaces(); s++)
							{
								double f = GetFactor(z, g, s, results);
								double ff = 1;
								//The factor of this scale is apply only on the residual of the finer scale
								for (size_t zz = 0; zz < z; zz++)
									ff -= m_factor[*it][zz][g][s];

								m_factor[*it][z][g][s] = max(0.0, min(1.0, f*ff));

								if (m_factor[*it][z][g][s] < 1.0)
									bContinue = true;
							}
						}

					}
					else
					{
						for (size_t m = 0; m < 12; m++)
							for (size_t s = 0; s < GetNbSpaces(); s++)
								m_gradient[z][g][m][s] = m_bUseShore ? DEFAULT_GRADIENTS[e][g][m][s] : DEFAULT_GRADIENTS_NO_SHORE[e][g][m][s];

						m_Sᵒ[z][g] = GLOBAL_Sᵒ[e][g];

						for (set<int>::const_iterator it = years.begin(); it != years.end(); it++)
						{
							for (size_t s = 0; s < GetNbSpaces(); s++)
							{
								double ff = 1;
								//The factor of this scale is apply only on the residual of the finer scale
								for (size_t zz = 0; zz < z; zz++)
									ff -= m_factor[*it][zz][g][s];

								m_factor[*it][z][g][s] = max(0.0, min(1.0, ff));
							}
						}

						bContinue = false;
						//}



					}


					msg += callback.StepIt();
				}//for all scale

				for (set<int>::const_iterator it = years.begin(); it != years.end(); it++)
				{
					for (size_t s = 0; s < GetNbSpaces(); s++)
					{
						double f = 0;
						for (size_t z = 0; z < NB_SCALE_GRADIENT&&msg; z++)
							f += m_factor[*it][z][g][s];

						ASSERT(f == 1);
					}
				}
			}//if selected variable
		}//all variable


		callback.PopTask();
		return msg;
	}

	void CWeatherGradient::GetSᵒ(size_t g, const CSearchResultVector& results, CGradientSᵒ& Sᵒ)const
	{
		size_t f = G2F(g);
		for (size_t i = 0; i < results.size(); i++)
		{
			CNormalsStation station;
			m_pNormalDB->Get(station, results[i].m_index);

			for (size_t m = 0; m < 12; m++)
			{
				ASSERT(!IsMissing(station[m][f]));
				Sᵒ[m] += station[m][f];
			}
		}
	}

	ERMsg CWeatherGradient::ComputeGradient(size_t g, CSearchResultVector& results, CGradientYear& Gr, CGradientR²& R², CGradientInput& input, CCallback& callback)
	{
		ERMsg msg;

		size_t f = G2F(g);

		size_t nbSpaces = GetNbSpaces();
		NEWMAT::Matrix M((int)results.size(), (int)nbSpaces); //lat, lon, elev, Dshore
		array<NEWMAT::ColumnVector, 12> V;//12 months

		for (size_t m = 0; m < 12; m++)
			V[m].ReSize((int)results.size());

		//CLocation Lᵒ;
		//results.GetCentroid(Lᵒ);


		for (int i = 0; i < (int)results.size() && msg; i++)
		{
			CNormalsStation station;
			m_pNormalDB->Get(station, results[i].m_index);


			//M[i][X_GR] = GetDistance(X_GR, station, Lᵒ) / 1000;	//1000 km
			//M[i][Y_GR] = GetDistance(Y_GR, station, Lᵒ) / 1000;	//1000 km
			//M[i][Z_GR] = GetDistance(Z_GR, station, Lᵒ) / 1000;	//1000 m
			//
			//if (D_SHORE < nbSpaces)
			//	M[i][S_GR] = GetDistance(S_GR, station, Lᵒ) / 1000;	//1000 km

			M[i][X_GR] = GetDistance(X_GR, station, m_target) / 1000;	//1000 km
			M[i][Y_GR] = GetDistance(Y_GR, station, m_target) / 1000;	//1000 km
			M[i][Z_GR] = GetDistance(Z_GR, station, m_target) / 1000;	//1000 m

			if (D_SHORE < nbSpaces)
				M[i][S_GR] = GetDistance(S_GR, station, m_target) / 1000;	//1000 km


			for (size_t m = 0; m < 12; m++)
			{

				V[m][i] = station[m][f];
				ASSERT(!IsMissing(V[m][i]));
			}

			msg += callback.StepIt(0);
		}


		Try
		{
			NEWMAT::ColumnVector fitted;
			NEWMAT::ColumnVector result;

			for (size_t m = 0; m < 12 && msg; m++)
			{
				R²[m] = DoRegression(M, V[m], result, fitted);
				for (size_t s = 0; s < nbSpaces; s++)
				{
					int i = int(s) + 1;
					if (!_isnan(result[i]) && isfinite(result[i]))
					{
						Gr[m][s] = result[i];
					}
				}

				msg += callback.StepIt(0);
			}
		}
			Catch(NEWMAT::Exception)
		{
			msg.asgType(ERMsg::ERREUR);

			if (NEWMAT::Exception::what() != NULL)
				msg.ajoute(NEWMAT::Exception::what());
		}

		if (m_bKeepInputs)
		{
			input.resize(results.size());
			for (int i = 0; i < (int)results.size() && msg; i++)
			{
				size_t c = 0;
				input[i][c++] = M[i][X_GR];
				input[i][c++] = M[i][Y_GR];
				input[i][c++] = M[i][Z_GR];
				if (D_SHORE < nbSpaces)
					input[i][c++] = M[i][S_GR];
				else
					input[i][c++] = -999;

				for (size_t m = 0; m < 12; m++)
					input[i][c++] = V[m][i];


			}

			/*ofStream out;
		out.open("C:/temp/testGradient.csv");
		out << "station,X,Y,Z,S,m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12" << endl;

		for (int i = 0; i < (int)results.size() && msg; i++)
		{
			out << i;
			out << "," << M[i][X_GR];
			out << "," << M[i][Y_GR];
			out << "," << M[i][Z_GR];
			out << "," << M[i][S_GR];

			for (size_t m = 0; m < 12; m++)
				out << "," << V[m][i];

			out << endl;
		}
		out.close();*/
		}


		return msg;
	}

	double CWeatherGradient::GetCorrectionII(const CLocation& station, size_t m, size_t g, size_t s, int year)const
	{
		ASSERT(s >= GetNbSpaces() || (m_factor.at(year)[0][g][s] + m_factor.at(year)[1][g][s] + m_factor.at(year)[2][g][s]) == 1);

		double correction = (g == PRCP_GR) ? 1 : 0;

		double delta = GetDistance(s, m_target, station) / 1000; //1000 km or 1000 m

		if (g == TMIN_GR || g == TMAX_GR)
		{
			for (size_t z = 0; z < NB_SCALE_GRADIENT; z++)
				correction += delta * m_factor.at(year)[z][g][s] * m_gradient[z][g][m][s];// / nbSpaces 
		}
		else if (g == PRCP_GR)
		{
			double c = 0;
			double Sᵒ = 0;

			for (size_t z = 0; z < NB_SCALE_GRADIENT; z++)
			{
				c += delta * m_factor.at(year)[z][g][s] * m_gradient[z][g][m][s];// / nbSpaces 
				Sᵒ += (m_factor.at(year)[z][g][s] * m_Sᵒ[z][g][m][MEAN]);/// nbSpaces 
			}

			ASSERT(Sᵒ > 0);

			if (Sᵒ > 0)
				correction = (Sᵒ + c) / Sᵒ;

			if (correction < 0.1)
				correction = 0.1;
			else if (correction > 10)
				correction = 10;
		}

		return correction;
	}

	double CWeatherGradient::GetCorrection(const CLocation& station, CTRef TRef, size_t v, int year)const
	{
		//		ASSERT(type < NB_CORRECTION_TYPES);

		double correction = (v == H_PRCP) ? 1 : 0;
		size_t g = V2G(v);
		size_t m = TRef.GetMonth();

		if (v == H_PRES)
		{
			//reverse correction by RSA 15-02-2019
			correction = (GetPressure(m_target.m_alt) - GetPressure(station.m_alt)) / 100; //correction in [hPa]
		}
		else if (v == H_TMIN || v == H_TAIR || v == H_TMAX)
		{
			if (TRef.GetType() == CTM::HOURLY)
			{
				double cTmin = 0;
				double cTmax = 0;

				for (size_t s = 0; s < GetNbSpaces(); s++)
				{
					cTmin += GetCorrectionII(station, m, TMIN_GR, s, year);
					cTmax += GetCorrectionII(station, m, TMAX_GR, s, year);
				}

				double p = (sin(2 * PI*TRef.GetHour() / 24.0) + 1) / 2;//full Tmin gradient at 6:00 and full Tmax gradient at 18:00
				assert(p >= 0 && p <= 1);

				correction = cTmin * p + cTmax * (1 - p);

			}
			else
			{
				if (v == H_TAIR)
				{
					//pour l'instant je laisse les gradients moyen, mais a changer pour le gradient Tair  : ajouter Tair Pres dans normals
					for (size_t s = 0; s < GetNbSpaces(); s++)
						correction += (GetCorrectionII(station, m, TMIN_GR, s, year) + GetCorrectionII(station, m, TMAX_GR, s, year)) / 2;
				}
				else
				{
					for (size_t s = 0; s < GetNbSpaces(); s++)
						correction += GetCorrectionII(station, m, g, s, year);
				}
			}
		}
		else if (v == H_PRCP)
		{
			for (size_t s = 0; s < GetNbSpaces(); s++)
				correction *= GetCorrectionII(station, m, g, s, year);
		}



		return correction;
	}


	ERMsg CWeatherGradient::Save(const string& filePath)const
	{
		ERMsg msg;

		string filePath1 = GetPath(filePath) + GetFileTitle(filePath) + "_gradient" + GetFileExtension(filePath);
		string filePath2 = GetPath(filePath) + GetFileTitle(filePath) + "_factor" + GetFileExtension(filePath);


		ofStream file1;
		msg = file1.open(filePath1);

		if (msg)
		{
			file1.write("scale,gradient,year,month,R²,S°,X,Y,Z,S\n");

			for (size_t z = 0; z < NB_SCALE_GRADIENT; z++)
			{
				for (size_t g = 0; g < NB_GRADIENT; g++)
				{
					for (size_t m = 0; m < 12; m++)
					{
						double Sᵒ = 0;
						if (m_Sᵒ[z][g][m].IsInit())
							Sᵒ = m_Sᵒ[z][g][m][MEAN];

						string line = FormatA("%d,%d,%02d,%0.3lf,%+0.3lf", z + 1, g + 1, m + 1, m_R²[z][g][m], Sᵒ);
						for (size_t s = 0; s < NB_SPACE_EX; s++)
							line += "," + FormatA("%+07.4lf", m_gradient[z][g][m][s]);

						file1.write(line + "\n");
					}
				}
			}
		}

		file1.close();

		ofStream file2;
		msg = file2.open(filePath2);

		if (msg)
		{
			file2.write("gradient,space,f1,f2,f3\n");


			for (size_t g = 0; g < NB_GRADIENT; g++)
			{
				for (size_t s = 0; s < NB_SPACE_EX; s++)
				{
					string line = FormatA("%d,%d,%0.3lf,%0.3lf,%0.3lf", g + 1, s + 1, m_factor.at(-999)[0][g][s], m_factor.at(-999)[1][g][s], m_factor.at(-999)[2][g][s]);
					file2.write(line + "\n");
				}
			}
		}

		file2.close();

		return msg;
	}

	ERMsg CWeatherGradient::ExportInput(const string& filePath, size_t v, CSearchResultVector& results )
	{
		ERMsg msg;

		ofStream file;

		msg = file.open(filePath);
		if (msg)
		{
			if (results.empty())
				m_pNormalDB->GetStationList(results, (TVarH)v);

			file.write("KeyID,Name,Lat,Lon,Alt,DShore,Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec\n");

			size_t f = V2F(v);

			string lines;
			for (size_t i = 0; i < results.size(); i++)
			{
				const CLocation& station = (*m_pNormalDB)[results[i].m_index];
				double D = station.GetShoreDistance() / 1000000;//at 1000 km

				string line = FormatA("%s,%s,%lf,%lf,%lf,%lf",
					station.m_ID.c_str(),
					station.m_name.c_str(),
					station.m_lat,
					station.m_lon,
					station.m_elev,
					D
				);


				const CNormalsData& data = m_pNormalDB->GetData(results[i].m_index);

				//size_t e = station.m_lat < 0 ? 0 : 1;
				for (size_t m = 0; m < 12; m++)
				{
					//double a1 = data[m][f];
					//double a2 = GLOBAL_Sᵒ[e][PRCP_GR][m];
					line += FormatA(",%.1lf", data[m][f]);
				}



				file.write(line + "\n");
			}

			file.close();
		}

		return msg;
	}



	/*void CWeatherGradient::CreateDataset()
	{

	CProjection projection1;

	ERMsg msg = projection1.SetPrjStr("+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs");
	if (msg)
	{
	CProjection projection2(true);

	CGeoPoint xy(-7910615, 5921757);
	xy.Reproject(CProjectionTransformationManager::Get(projection1.GetPrjID(), projection2.GetPrjID()));

	}
	}
	*/
}